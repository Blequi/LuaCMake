name: Ubuntu Lua Install
run-name: Testing out Lua install on Ubuntu
on: [push]
jobs:
  Ubuntu-Lua-Install:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        LUA_VERSION: ['5.1.5', '5.2.4', '5.3.6', '5.4.6']
        LUAROCKS_VERSION: ['3.11.0']
    steps:
      - name: Checkout repository to LuaCMake directory
        uses: actions/checkout@v4
        with:
          path: LuaCMake
      - name: Configure the build of Lua ${{ matrix.LUA_VERSION }}
        run: cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Release -DDOWNLOAD_LUA_SOURCES=ON "-DLUA_VERSION=${{ matrix.LUA_VERSION }}" --install-prefix $RUNNER_TEMP/Lua-install/${{ matrix.LUA_VERSION }} -S LuaCMake -B $RUNNER_TEMP/Lua-build/${{ matrix.LUA_VERSION }}
      - name: Build Lua ${{ matrix.LUA_VERSION }}
        run: cmake --build $RUNNER_TEMP/Lua-build/${{ matrix.LUA_VERSION }} --config Release
      - name: Install Lua ${{ matrix.LUA_VERSION }}
        run: cmake --install $RUNNER_TEMP/Lua-build/${{ matrix.LUA_VERSION }} --config Release
      - name: Test Lua ${{ matrix.LUA_VERSION }}
        run: $RUNNER_TEMP/Lua-install/${{ matrix.LUA_VERSION }}/bin/lua -v
      - name: Download LuaRocks
        run: wget https://luarocks.org/releases/luarocks-${{ matrix.LUAROCKS_VERSION }}.tar.gz
      - name: Unpack LuaRocks
        run: tar -xf luarocks-${{ matrix.LUAROCKS_VERSION }}.tar.gz
      - name: Configure LuaRocks
        run: $RUNNER_TEMP/luarocks-${{ matrix.LUAROCKS_VERSION }}/configure --prefix=$RUNNER_TEMP/LuaRocks-install/${{ matrix.LUAROCKS_VERSION }} --with-lua=$RUNNER_TEMP/Lua-install/${{ matrix.LUA_VERSION }}
      - name: Build LuaRocks
        run: make
      - name: Install LuaRocks
        run: make install
      - name: Output LuaRocks path to file
        run: eval $($RUNNER_TEMP/LuaRocks-install/${{ matrix.LUAROCKS_VERSION }}/bin/luarocks path)
      - name: Install LuaFileSystem
        run: luarocks install luafilesystem
      - name: Test LuaFileSystem
        run: $RUNNER_TEMP/Lua-install/${{ matrix.LUA_VERSION }}/bin/lua -e "local lfs = require'lfs'; function attrdir (path) for file in lfs.dir(path) do if file ~= '.' and file ~= '..' then local f = path..'/'..file; print ('\t '..f); local attr = lfs.attributes (f); assert (type(attr) == 'table'); if attr.mode == 'directory' then attrdir (f); else for name, value in pairs(attr) do print (name, value); end end end end end attrdir ('.')"