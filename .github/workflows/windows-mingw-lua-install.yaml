name: MinGW Lua Install
run-name: Lua on Windows with MinGW
on:
  push:
    paths-ignore:
      - "**/*.md"
      - "doc"
  pull_request:
    paths-ignore:
      - "**/*.md"
      - "doc"

jobs:
  MinGW-Lua-Install:
    runs-on: windows-latest

    strategy:

      matrix:
        LUA_VERSION:
          - 5.1.5
          - 5.2.4
          - 5.3.6
          - 5.4.8

        LUAROCKS_VERSION:
          - 3.12.2

        CMAKE_BUILD_TYPE:
          - Release

        CMAKE_GENERATOR:
          - Unix Makefiles

    steps:

      - name: Checkout repository to LuaCMake directory
        uses: actions/checkout@v4
        with:
          path: LuaCMake

        # MinGW from sourceforge:
        # https://sourceforge.net/projects/mingw
      - name: Download and extract MinGW
        run: |
          $mingw32_dir = Join-Path -Path "${{ runner.temp }}" -ChildPath "MinGW";

          if (Test-Path -Path $mingw32_dir)
          {
            Remove-Item -Path $mingw32_dir -Recurse;
          }

          New-Item -Path $mingw32_dir -Type Directory;

          cd $mingw32_dir;

          $SEVEN_ZIP = Join-Path -Path ${env:ProgramFiles} -ChildPath "7-Zip" |
            Join-Path -ChildPath "7z.exe";
          $MINGW32_GET_PACKAGE_VER = "mingw-get-0.6.2-beta-20131004-1";
          $MINGW32_PACKAGE_VER = "0.6.2-mingw32-beta-20131004-1";

          foreach ($package in @("mingw-get-setup"))
          {
            foreach ($kind in @("dll", "xml"))
            {
              $filename = "${package}-${MINGW32_PACKAGE_VER}-${kind}";
              $tarfile = "${filename}.tar";
              $xzfile = "${tarfile}.xz";
              $url = "https://sourceforge.net/projects/mingw/files/Installer/mingw-get/${MINGW32_GET_PACKAGE_VER}/${xzfile}";

              Write-Host "Downloading package from ""${url}""";

              curl -L -O "${url}";

              & $SEVEN_ZIP x $xzfile;

              if ($LASTEXITCODE -ne 0)
              {
                Write-Host "Failed to extract $xzfile";
                exit 1;
              }

              & $SEVEN_ZIP x $tarfile;

              if ($LASTEXITCODE -ne 0)
              {
                Write-Host "Failed to extract $tarfile";
                exit 1;
              }
            }
          }

          foreach ($package in @("pkginfo"))
          {
            foreach ($kind in @("bin"))
            {
              $filename = "${package}-${MINGW32_PACKAGE_VER}-${kind}";
              $tarfile = "${filename}.tar";
              $xzfile = "${tarfile}.xz";
              $url = "https://sourceforge.net/projects/mingw/files/Installer/mingw-get/${MINGW32_GET_PACKAGE_VER}/${xzfile}";

              Write-Host "Downloading package from ""${url}""";

              curl -L -O "${url}";

              & $SEVEN_ZIP x $xzfile;

              if ($LASTEXITCODE -ne 0)
              {
                Write-Host "Failed to extract $xzfile";
                exit 1;
              }

              & $SEVEN_ZIP x $tarfile;

              if ($LASTEXITCODE -ne 0)
              {
                Write-Host "Failed to extract $tarfile";
                exit 1;
              }
            }
          }

          foreach ($package in @("mingw-get"))
          {
            foreach ($kind in @("bin", "gui", "lic", "src"))
            {
              $filename = "${package}-${MINGW32_PACKAGE_VER}-${kind}";
              $tarfile = "${filename}.tar";
              $xzfile = "${tarfile}.xz";
              $url = "https://sourceforge.net/projects/mingw/files/Installer/mingw-get/${MINGW32_GET_PACKAGE_VER}/${xzfile}";

              Write-Host "Downloading package from ""${url}""";

              curl -L -O "${url}";

              & $SEVEN_ZIP x $xzfile;

              if ($LASTEXITCODE -ne 0)
              {
                Write-Host "Failed to extract $xzfile";
                exit 1;
              }

              & $SEVEN_ZIP x $tarfile;

              if ($LASTEXITCODE -ne 0)
              {
                Write-Host "Failed to extract $tarfile";
                exit 1;
              }
            }
          }

          $mingw32_bindir = Join-Path -Path "${mingw32_dir}" -ChildPath "bin";
          $mingw32_gcc = Join-Path -Path "${mingw32_bindir}" -ChildPath "mingw32-gcc.exe";

          Add-Content "${{ github.path }}" "${mingw32_bindir}";
          Add-Content "${{ github.env }}" "CC=${mingw32_gcc}";

      - name: Update MinGW catalogue
        run: mingw-get update

      - name: Install GCC compiler and GNU Make
        run: mingw-get install --all-related mingw32-gcc mingw32-make

      - name: Set environment variables
        run: |
          $lua_dir = [System.IO.Path]::Combine("${{ runner.temp }}", "lua", "${{ matrix.LUA_VERSION }}");
          $luarocks_dir = [System.IO.Path]::Combine("${{ runner.temp }}", "luarocks-${{ matrix.LUAROCKS_VERSION }}-windows-64");
          $lua_build_dir = [System.IO.Path]::Combine("${{ runner.temp }}", "lua-build");
          $lfs_test_file = [System.IO.Path]::Combine("${{ runner.temp }}", "lfs-test.lua");

          Add-Content "${{ github.env }}" "LUA_DIR=$lua_dir"
          Add-Content "${{ github.env }}" "LUAROCKS_DIR=$luarocks_dir"
          Add-Content "${{ github.env }}" "LUA_BUILD_DIR=$lua_build_dir"
          Add-Content "${{ github.env }}" "LFS_TEST_FILE=$lfs_test_file"

      - name: Place Lua and LuaRocks on system environment PATH variable
        run: |
          $lua_bin_dir = [System.IO.Path]::Combine("${{ env.LUA_DIR }}", "bin");

          Add-Content "${{ github.path }}" "$lua_bin_dir"
          Add-Content "${{ github.path }}" "${{ env.LUAROCKS_DIR }}"

      - name: Configure the build of Lua ${{ matrix.LUA_VERSION }}
        run: |
          cmake `
            -G "${{ matrix.CMAKE_GENERATOR }}" `
            -DCMAKE_BUILD_TYPE=${{ matrix.CMAKE_BUILD_TYPE }} `
            -DDOWNLOAD_LUA_SOURCES=ON `
            "-DLUA_VERSION=${{ matrix.LUA_VERSION }}" `
            --install-prefix "${{ env.LUA_DIR }}" `
            -S LuaCMake `
            -B "${{ env.LUA_BUILD_DIR }}"

      - name: Build Lua ${{ matrix.LUA_VERSION }}
        run: cmake --build "${{ env.LUA_BUILD_DIR }}" --config ${{ matrix.CMAKE_BUILD_TYPE }}

      - name: Install Lua ${{ matrix.LUA_VERSION }}
        run: cmake --install "${{ env.LUA_BUILD_DIR }}" --config ${{ matrix.CMAKE_BUILD_TYPE }}

      - name: Test Lua ${{ matrix.LUA_VERSION }}
        run: lua -v

      - name: Download LuaRocks
        run: Invoke-WebRequest -Uri https://luarocks.org/releases/luarocks-${{ matrix.LUAROCKS_VERSION }}-windows-64.zip -OutFile luarocks-${{ matrix.LUAROCKS_VERSION }}-windows-64.zip

      - name: Extract LuaRocks
        run: Expand-Archive luarocks-${{ matrix.LUAROCKS_VERSION }}-windows-64.zip -DestinationPath ([System.IO.Path]::GetDirectoryName("${{ env.LUAROCKS_DIR }}"))

      - name: Configure LuaRocks for the built Lua interpreter
        run: |
          luarocks config lua_dir "${{ env.LUA_DIR }}"

          if ("${{ matrix.LUA_VERSION }}" -match "^(\d+)\.(\d+)(\.\d+)*$")
          {
            $LUA_SHORT_VERSION=$Matches.1 + "." + $Matches.2
            luarocks config lua_version $LUA_SHORT_VERSION
          }
          else
          {
            Write-Host "Invalid Lua version: ${{ matrix.LUA_VERSION }}";
            exit 1;
          }

      - name: Update environment variables with variables from LuaRocks
        run: |
          $luarocks_path = luarocks.exe path
          Add-Content "${{ github.env }}" $luarocks_path.Replace("""", "").Replace("'", "").Replace("SET ", "")

      - name: Install LuaFileSystem
        run: luarocks install luafilesystem

      - name: Prepare a test file for LuaFileSystem
        run: |
          $test_script = @'

          -- LuaFileSystem standard example ( see https://lunarmodules.github.io/luafilesystem/examples.html )

          local lfs = require"lfs"

          function attrdir (path)
              for file in lfs.dir(path) do
                  if file ~= "." and file ~= ".." then
                      local f = path..'/'..file
                      print ("\t "..f)
                      local attr = lfs.attributes (f)
                      assert (type(attr) == "table")
                      if attr.mode == "directory" then
                          attrdir (f)
                      else
                          for name, value in pairs(attr) do
                              print (name, value)
                          end
                      end
                  end
              end
          end

          attrdir (".")
          '@

          Set-Content "${{ env.LFS_TEST_FILE }}" $test_script -NoNewLine

      - name: Test LuaFileSystem
        run: lua "${{ env.LFS_TEST_FILE }}"
